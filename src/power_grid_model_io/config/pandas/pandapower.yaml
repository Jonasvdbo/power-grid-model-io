# SPDX-FileCopyrightText: 2022 Contributors to the Power Grid Model project <dynamic.grid.calculation@alliander.com>
#
# SPDX-License-Identifier: MPL-2.0
---
grid:
  bus:
    node:
      id: index
      u_rated: vn_kv
  line:
    line:
      id: index
      from_node: from_bus
      from_status: in_service
      to_node: to_bus
      to_status: in_service
      r1:
        power_grid_model_io.filters.multiply:
          - r_ohm_per_km
          - length_km
      x1:
        power_grid_model_io.filters.multiply:
          - x_ohm_per_km
          - length_km
      c1:
        power_grid_model_io.filters.multiply:
          - c_nf_per_km
          - length_km
      #r0:
      #  power_grid_model_io.filters.multiply:
      #    - r0_ohm_per_km
      #    - length_km
      #x0:
      #  power_grid_model_io.filters.multiply:
      #    - x0_ohm_per_km
      #    - length_km
      #c0:
      #  power_grid_model_io.filters.multiply:
      #    - c0_nf_per_km
      #    - length_km
      i_n: max_i_ka
  load:
    sym_load:
      id: index
      node: bus
      status: in_service
      p_specified: p_mw
      q_specified: q_mvar
  ext_grid:
    source:
      id: index
      node: bus
      status: in_service
      u_ref: vm_pu
      #sk: s_sc_max_mva
      #rx_ratio: rx_max
      #z01_ratio: x0x_max
  shunt:
    shunt:
      id: index
      node: bus
      status: in_service
      g1:
        power_grid_model_io.filters.pandapower.positive_sequence_conductance:
          - p_mw
          - bus!vn_kv[bus!index=shunt!bus]
      b1:
        power_grid_model_io.filters.pandapower.positive_sequence_conductance:
          - q_mvar
          - bus!vn_kv[bus!index=shunt!bus]
  sgen:
    sym_gen:
      id: index
      node: bus
      status: in_service
      p_specified: p_mw
      q_specified: q_mvar
  trafo:
    transformer:
      id: index
      from_node: hv_bus
      from_status: in_service
      to_node: lv_bus
      to_status: in_service
      u1: vn_hv_kv
      u2: vn_lv_kv
      sn: sn_mva
      uk: vk_percent
      pk:
        power_grid_model_io.filters.multiply:
          - vkr_percent
          - sn_mva
      i0: i0_percent
      p0: pfe_kw
      winding_from:
        power_grid_model_io.filters.pandapower.get_transformer_winding_from:
          self.get_trafo_vector_group:
            - vector_group | std_type
      winding_to:
        power_grid_model_io.filters.pandapower.get_transformer_winding_to:
          self.get_trafo_vector_group:
            - vector_group | std_type
      clock:
        power_grid_model_io.filters.pandapower.get_transformer_clock:
          - shift_degree
      tap_pos: tap_pos
      tap_min: tap_min
      tap_max: tap_max
      tap_nom: tap_neutral #default zero
      tap_size:
        power_grid_model_io.filters.pandapower.get_transformer_tap_size:
          - vn_hv_kv
          - vn_lv_kv
          - tap_step_percent
          - tap_side
  trafo3w:
    three_winding_transformer:
      id: index
      u1: vn_hv_kv
      u2: vn_mv_kv
      u3: vn_lv_kv
      sn_1: sn_hv_mva
      sn_2: sn_mv_mva
      sn_3: sn_lv_mva
      uk_12: vk_hv_percent
      uk_13: vk_lv_percent
      uk_23: vk_mv_percent
      pk_12:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_pk:
          - vkr_hv_percent
          - sn_hv_mva
          - sn_mv_mva
      pk_13:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_pk:
          - vkr_lv_percent
          - sn_hv_mva
          - sn_lv_mva
      pk_23:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_pk:
          - vkr_mv_percent
          - sn_mv_mva
          - sn_lv_mva
      i0: i0_percent
      p0: pfe_kw
      #winding_1:
      #  power_grid_model_io.filters.pandapower.get_3wdgtransformer_winding_1:
      #    - vector_group
      #winding_2:
      #  power_grid_model_io.filters.pandapower.get_3wdgtransformer_winding_2:
      #    - vector_group
      #winding_3:
      #  power_grid_model_io.filters.pandapower.get_3wdgtransformer_winding_3:
      #    - vector_group
      clock_12: shift_mv_degree
      clock_13: shift_lv_degree
      tap_pos: tap_pos
      tap_min: tap_min
      tap_max: tap_max
      tap_nom: tap_neutral
      #tap_size:
      #  power_grid_model_io.filters.pandapower.get_3wdgtransformer_tap_size:
      #    - vn_hv_kv
      #    - vn_mv_kv
      #    - vn_lv_kv
      #    - tap_step_percent
      #    - tap_side
substitutions:
  trafo.tap_side:
    "hv": 0
    "lv": 1
  trafo3w.tap_side:
    "hv": 0
    "mv": 1
    "lv": 2


#vector group with std_type
#attributes in 3wdgtrafo, error with column
#Indexes
#Assymetric calc